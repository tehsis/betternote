{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8180\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Para el frontend, vamos a adoptar un modelo que funcione 100% desde el cliente, haciendo uso de nuestra API para pedir y persistir datos.\
Esta aplicaci\'f3n debe verse correctamente desde un dispositivo m\'f3vil y funcionar offline.\
\
Ac\'e1 nuevamente vamos a tener un sin fin de opciones para muchas cosas. Para nuestro caso, vamos a utilizar el framework Ember, el cual nos permite manejar \'93estados\'94 en nuestra aplicaci\'f3n mediante una implementaci\'f3n de un patr\'f3n  simil-MVC.\
\
\'bfPor qu\'e9 Ember? Por muchas razones. En principio, su excelente documentaci\'f3n y comunidad no nos va a dejar estancados en ning\'fan momento de nuestro proyecto. Algo que sin duda pueden envidiar otros frameworks.\
\
Para comenzar con Ember, vamos a usar /ember-cli/, una herramienta pensada para todo el ciclo de desarrollo de nuestra aplicaci\'f3n. La misma soluciona inconvenientes comunes a muchos desarrollo web en general y de Ember en particular. Nos permite manejar distintos entornos e incluso prepar\'e1 nuestra aplicaci\'f3n para llevarla a producci\'f3n.\
\
[Introducci\'f3n a Bower]\
\
[Introducci\'f3n a grunt]\
\
Manos a la obra, instalamos ember-cli\
\
#npm install -g ember\
\
Comenzamos creando nuestro proyecto mediante\
\
$ember new notes-front\
\
Esto creara una carpeta llamada notes-front con una serie de car}